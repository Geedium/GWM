#!/usr/bin/env php
<?php

if (php_sapi_name() != 'cli') {
    throw new Exception('This application must be run on the command line.');
}

if (basename(getcwd()) == 'tools') {
    chdir('../');
}

// @include_once 'vendor/autoload.php';

ini_set('cli_server.color', 'on');

set_time_limit(0);
$status = 0;
$task = -1;
$options = [];
$n = sizeof($argv);

if (PHP_OS_FAMILY == 'Windows') {
    echo chr(27).chr(91).'H'.chr(27).chr(91).'J';
}

function textout($message)
{
    $string = '';

    $string .= "\033[1;40m";
    $string .= $message;
    $string .= "\033[m";

    if (PHP_OS_FAMILY == 'Windows') {
        $string .= "\r\n";
    }

    echo $string;
}

function logAccess($status = 200)
{
    file_put_contents("php://stdout", sprintf(
        "\033[1;37m[%s] %s:%s [%s]:\033[m %s \r\n",
        date("D M j H:i:s Y"),
        $_SERVER["REMOTE_ADDR"],
        $_SERVER["REMOTE_PORT"],
        $status,
        $_SERVER["REQUEST_URI"]
    ));
}


class Colors
{
    const COLOR_BLACK = "\033[1;30m";
    const COLOR_GREEN = "\033[1;32m";
    const COLOR_WHITE = "\033[1;37m";
    const COLOR_BLUE = "\033[1;34m";

    public static function Background($color): string
    {
        $m = explode(';', $color)[1];
        $i = (int)substr($m, 0, -1);
        $i += 10;
        return "\033[0;{$i}m";
    }
}

function out($message, $fg = "\033[1;37m", $bg = "\033[0;41m")
{
    $string = '';

    $string .= $bg;
    $string .= $fg;
    $string .= $message;
    $string .= "\033[m"; // Reset color.

    if (PHP_OS_FAMILY == 'Windows') {
        $string .= "\r\n";
    }

    echo $string;
}

textout('
  _____ __          __ __  __ 
 / ____|\ \        / /|  \/  |
| |  __  \ \  /\  / / | \  / |
| | |_ |  \ \/  \/ /  | |\/| |
| |__| |   \  /\  /   | |  | |
 \_____|    \/  \/    |_|  |_|

');

while ($n < 2) {
    $a = readline('>');

    if (strlen($a) > 0) {
        $argv[] = $a;
        $n = count($argv);
    }
}

function TEST($cond, $success, $error, $inverted = false)
{
    if ($cond) {
        if ($inverted) {
            $success($cond);
        } else {
            $error($cond);
        }
    } else {
        if ($inverted) {
            $error($cond);
        } else {
            $success($cond);
        }
    }
}

for ($i = 1; $i <= $n; $i++) {
    if (!$argv[$i]) {
        continue;
    }

    switch ($argv[$i]) {
        case 'cron':
            $task = 0;

            if ($i + 2 <= $n) {
                if ($argv[$i + 1] == '-f') {
                    $options['f'] = $argv[$i + 2];
                }
            }
        break;
        case 'nr':
            try {
                $data = PHP_MAJOR_VERSION < 7 ? openssl_random_pseudo_bytes(16) : random_bytes(16);
                $data[6] = chr(ord($data[6]) & 0x0f | 0x40);    // Set version to 0100
                $data[8] = chr(ord($data[8]) & 0x3f | 0x80);    // Set bits 6-7 to 10
                $uuid = vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));

                if (mkdir("resources/{{$uuid}}", 0777, true)) {
                    out("Success");
                } else {
                    out("Failed.");
                }
            } catch (Exception $e) {
                out($e->getMessage());
            }
            break;
        case 'compile':
            if ($i + 2 <= $n) {
                if ($argv[$i + 1] == 'lang') {
                    textout("Compressing & outputing.");

                    $lang = include 'src/Core/Locales/lt_LT/global.php';
                    if ($lang === false) {
                        textout("Failed to read lang array.");
                    }

                    $lang = gzcompress(serialize($lang));

                    if (!is_dir('locales/lt_LT')) {
                        mkdir('locales/lt_LT');
                    }

                    $handle = fopen('locales/lt_LT/global.ser', 'w+');
                    fwrite($handle, $lang, strlen($lang));
                    fclose($handle);

                    var_dump($lang);
                }
            }
        break;
        case 'sass':
            out("Compiling Sass!");
            // $sass = new \GWM\Core\UI\Sass($argv[$i + 1]);
            // $sass->Compile($argv[$i + 2]);
        break;
        case 'update':
            out("Updating composer deps...");

            $php = popen("composer update --no-dev --optimize-autoloader", 'r');

            while (!feof($php) == true) {
                echo fread($php, 4096);
                flush();
            }

            textout("Done");

            break;
        case 'setup':

            out("Making things to run.");

            $php = popen("composer install -n -o --no-dev", 'r');

            while (!feof($php) == true) {
                echo fread($php, 4096);
                flush();
            }

            // Build assets.
            // $dist = new \GWM\Core\Distributor();

            out("Done");

            break;
        case 'dev':
            out("Starting PHP development server at 127.0.0.1:8080");
            \shell_exec("start http://127.0.0.1:8080/ 2>&1");

            if (extension_loaded('openssl')) {
                if (!file_exists('resources/certs/localhost.csr')) {
                    out('Generating HTTPS certificate');

                    $config = array(
                        "digest_alg" => "des3",
                        "private_key_bits" => 1024,
                        "private_key_type" => OPENSSL_KEYTYPE_RSA,
                    );
        
                    $key = openssl_pkey_new($config);
        
                    TEST(openssl_error_string(), function ($error) {
                        chdir('resources/certs');
    
                        $cmd = 'openssl genrsa -out localhost.key 1024';
                        $descriptorspec = [STDIN, STDOUT, STDOUT];
                        $openssl = proc_open($cmd, $descriptorspec, $pipes);
                        proc_close($openssl);
    
                        $cmd = 'openssl req -new -config openssl.cnf -key localhost.key -out localhost.csr';
                        $descriptorspec = [STDIN, STDOUT, STDOUT];
                        $openssl = proc_open($cmd, $descriptorspec, $pipes);
                        proc_close($openssl);
                    }, function ($key) {
                        file_put_contents('server.key', $key);
                    }, true);
                }
            }

            $https = 0;
            
            if ($https) {
                // HTTPS is enabled.

                $socket = stream_socket_server("tcp://127.0.0.1:8080", $errno, $errstr);
                if (!$socket) {
                  echo "$errstr ($errno)<br />\n";
                } else {
                  while (true) {
                      $client = stream_socket_accept($socket);
                      
                      if ($client) {
                          print "accepted " . stream_socket_get_name( $client, true) . "\n";

                          
                          stream_set_blocking($client, true);

                          $headers = fread($client, 1500);
                          
                          $out = "200 OK HTTP/1.1\r\n";
                          $out .= "Content-Type: text/html\r\n";
                          $out .= "Connection: Close\r\n";
                          $out .= "\r\n";
                          fwrite($client, $out);

                          stream_set_blocking($client, false);

                          // Send Body
                          $out = "Hello world!".microtime(true);
                          fwrite($client, $out);

                          fclose($client);
                      }
                  }
                  fclose($socket);
                }

                // HTTPS - END
            } else {
                $php = popen("php -S 127.0.0.1:8080 -t public 2>&1", 'r');
                while (!feof($php) == true) {
                    echo fread($php, 4096);
                    // if(fread($php, 4096) != PHP_EOL) {
                    // logAccess();
                    // }
                    flush();
                }
    
                pclose($php);
            }

            break;
        case 'diag':
            $step = 0;
            $steps = 0;

            out("This might take a while...", Colors::COLOR_WHITE, Colors::Background(Colors::COLOR_BLUE));

            out("Extensions: ");
            out("curl - ".(extension_loaded('curl') ? 'OK' : 'ERROR') );
            out("pdo_mysql - ".(extension_loaded('pdo_mysql') ? 'OK' : 'ERROR') );

            if (extension_loaded('curl')) {
                if (!file_exists(__DIR__.'/resources/certs/ca-bundle.crt')) {
                    out("Downloading cert bundle package...");
    
                    $out = fopen(__DIR__.'/resources/certs/ca-bundle.crt', 'wb');
                    if ($out == false) {
                        out("Error occuried!");
                        exit(1);
                    }
    
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_FILE, $out);
                    curl_setopt($ch, CURLOPT_HEADER, 0);
                    curl_setopt($ch, CURLOPT_URL, 'https://curl.se/ca/cacert.pem');
                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                    curl_exec($ch);
                    curl_close($ch);
        
                    fclose($out);
                }
            }

            /**
             * WRAP
             */
            switch ($step) {
                case 0:
                    // \GWM\Core\Utils\Wrap::isStringNotEmpty(function (string $retval) use(&$steps) {
                    //     out("Wrap::isStringNotEmpty ({string: $retval}, OK)", Colors::COLOR_WHITE, Colors::Background(Colors::COLOR_GREEN));
                    //     $steps += 1;
                    // }, 'test');
                    $steps += 1;
                    // no break
                case 1:

            }

            if ($steps != 1) {
                out("Application safe-startup tests failed.");
            } else {
                out("Done!", Colors::COLOR_WHITE, Colors::Background(Colors::COLOR_GREEN));
            }
            break;
        case 'start':
            $ip = $_SERVER['REMOTE_ADDR'] ?? '0.0.0.0';
            out("Starting PHP development server at {$ip}:8080 as remote.");
            \shell_exec("start http://127.0.0.1:8080/ 2>&1");
            
            $php = popen("php -S 0.0.0.0:8080 -t public 2>&1", 'r');

            while (!feof($php) == true) {
                echo fread($php, 4096);
                flush();
            }

            break;
    }
}

$time = time();
$interval = 1 * 60; // 1 minute

switch ($task) {
    case 0:

        $string = '';

        $string .= "\033[1;37m";
        $string .= "\033[0;41m";
        $string .= "Executing CRON Job!\r\n";
        $string .= "Timer: Minute";
        $string .= "\033[m";

        if (PHP_OS_FAMILY == 'Windows') {
            $string .= "\r\n";
        }

        echo $string;

        while (true) {
            if ($time + $interval < time()) {
                echo $options['f'] . "\r\n";
                $time = time();
            }
        }
}

exit($status);
